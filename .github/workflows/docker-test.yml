# Testing connectivity to private docker registry.
name: Testing docker connections.

# Controls when the workflow will run
on:
  # Triggers the workflow on push request events but only for the "docker" branch
  push:
    branches: ["docker"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  docker_connect:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Connect to mta docker registry
      - name: Connect to docker
        uses: docker/login-action@v2
        with:
          registry: docker.mta.ca
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      # Runs a set of commands using the runners shell
      - name: Pull an image
        run: docker pull docker.mta.ca/mta_web_base:latest

  # Do actions inside a custom container.
  work_in_custom_image:
    runs-on: ubuntu-latest
    # get the listed container to work in.
    container:
      image: docker.mta.ca/mta_web_base:latest
      credentials:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}

    steps:
      - name: Pull in the code
        uses: actions/checkout@v3

      - name: Prove where we are
        shell: bash
        run: |
          pwd
          apt update && apt install neofetch -y
          neofetch
          ls -la
  # Use self-hosted runner.
  self_hosted:
    runs-on: docker-mta

    steps:
      - name: Runner machine info
        run: |
          neofetch
          ls -l
      # Need to run all the commands for the remote server through the ssh command.
      # This will be tricky but should work nonetheless.
      - name: Connect to another server
        run: |
          ssh ${{ secrets.UAT_SERVER_SSH }} \
          'neofetch && \
          cd container-site && \
          ls -l'
